<?php
/**
 * Ticket
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * ngDesk_Operations
 *
 * ngDesk_Operations
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * Ticket Class Doc Comment
 *
 * @category    Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Ticket implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'ticket';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'ticket_id' => 'int',
        'subject' => 'string',
        'date_required_by' => '\DateTime',
        'severity' => 'string',
        'date_created' => '\DateTime',
        'source' => 'string',
        'ticket_uuid' => 'string',
        'status' => 'string',
        'is_internal' => 'string',
        'requestor_group_user_id' => 'int',
        'assignee_group_user_id' => 'int',
        'owner_group_user_id' => 'int',
        'requestor_name' => 'string',
        'owner_name' => 'string',
        'assignee_name' => 'string',
        'owner_account_name' => 'string',
        'ticket_messages' => '\Swagger\Client\Model\TicketMessage[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'ticket_id' => null,
        'subject' => null,
        'date_required_by' => 'date-time',
        'severity' => null,
        'date_created' => 'date-time',
        'source' => null,
        'ticket_uuid' => null,
        'status' => null,
        'is_internal' => null,
        'requestor_group_user_id' => null,
        'assignee_group_user_id' => null,
        'owner_group_user_id' => null,
        'requestor_name' => null,
        'owner_name' => null,
        'assignee_name' => null,
        'owner_account_name' => null,
        'ticket_messages' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'ticket_id' => 'TICKET_ID',
        'subject' => 'SUBJECT',
        'date_required_by' => 'DATE_REQUIRED_BY',
        'severity' => 'SEVERITY',
        'date_created' => 'DATE_CREATED',
        'source' => 'SOURCE',
        'ticket_uuid' => 'TICKET_UUID',
        'status' => 'STATUS',
        'is_internal' => 'IS_INTERNAL',
        'requestor_group_user_id' => 'REQUESTOR_GROUP_USER_ID',
        'assignee_group_user_id' => 'ASSIGNEE_GROUP_USER_ID',
        'owner_group_user_id' => 'OWNER_GROUP_USER_ID',
        'requestor_name' => 'REQUESTOR_NAME',
        'owner_name' => 'OWNER_NAME',
        'assignee_name' => 'ASSIGNEE_NAME',
        'owner_account_name' => 'OWNER_ACCOUNT_NAME',
        'ticket_messages' => 'TICKET_MESSAGES'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'ticket_id' => 'setTicketId',
        'subject' => 'setSubject',
        'date_required_by' => 'setDateRequiredBy',
        'severity' => 'setSeverity',
        'date_created' => 'setDateCreated',
        'source' => 'setSource',
        'ticket_uuid' => 'setTicketUuid',
        'status' => 'setStatus',
        'is_internal' => 'setIsInternal',
        'requestor_group_user_id' => 'setRequestorGroupUserId',
        'assignee_group_user_id' => 'setAssigneeGroupUserId',
        'owner_group_user_id' => 'setOwnerGroupUserId',
        'requestor_name' => 'setRequestorName',
        'owner_name' => 'setOwnerName',
        'assignee_name' => 'setAssigneeName',
        'owner_account_name' => 'setOwnerAccountName',
        'ticket_messages' => 'setTicketMessages'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'ticket_id' => 'getTicketId',
        'subject' => 'getSubject',
        'date_required_by' => 'getDateRequiredBy',
        'severity' => 'getSeverity',
        'date_created' => 'getDateCreated',
        'source' => 'getSource',
        'ticket_uuid' => 'getTicketUuid',
        'status' => 'getStatus',
        'is_internal' => 'getIsInternal',
        'requestor_group_user_id' => 'getRequestorGroupUserId',
        'assignee_group_user_id' => 'getAssigneeGroupUserId',
        'owner_group_user_id' => 'getOwnerGroupUserId',
        'requestor_name' => 'getRequestorName',
        'owner_name' => 'getOwnerName',
        'assignee_name' => 'getAssigneeName',
        'owner_account_name' => 'getOwnerAccountName',
        'ticket_messages' => 'getTicketMessages'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['ticket_id'] = isset($data['ticket_id']) ? $data['ticket_id'] : null;
        $this->container['subject'] = isset($data['subject']) ? $data['subject'] : null;
        $this->container['date_required_by'] = isset($data['date_required_by']) ? $data['date_required_by'] : null;
        $this->container['severity'] = isset($data['severity']) ? $data['severity'] : null;
        $this->container['date_created'] = isset($data['date_created']) ? $data['date_created'] : null;
        $this->container['source'] = isset($data['source']) ? $data['source'] : null;
        $this->container['ticket_uuid'] = isset($data['ticket_uuid']) ? $data['ticket_uuid'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['is_internal'] = isset($data['is_internal']) ? $data['is_internal'] : null;
        $this->container['requestor_group_user_id'] = isset($data['requestor_group_user_id']) ? $data['requestor_group_user_id'] : null;
        $this->container['assignee_group_user_id'] = isset($data['assignee_group_user_id']) ? $data['assignee_group_user_id'] : null;
        $this->container['owner_group_user_id'] = isset($data['owner_group_user_id']) ? $data['owner_group_user_id'] : null;
        $this->container['requestor_name'] = isset($data['requestor_name']) ? $data['requestor_name'] : null;
        $this->container['owner_name'] = isset($data['owner_name']) ? $data['owner_name'] : null;
        $this->container['assignee_name'] = isset($data['assignee_name']) ? $data['assignee_name'] : null;
        $this->container['owner_account_name'] = isset($data['owner_account_name']) ? $data['owner_account_name'] : null;
        $this->container['ticket_messages'] = isset($data['ticket_messages']) ? $data['ticket_messages'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets ticket_id
     * @return int
     */
    public function getTicketId()
    {
        return $this->container['ticket_id'];
    }

    /**
     * Sets ticket_id
     * @param int $ticket_id
     * @return $this
     */
    public function setTicketId($ticket_id)
    {
        $this->container['ticket_id'] = $ticket_id;

        return $this;
    }

    /**
     * Gets subject
     * @return string
     */
    public function getSubject()
    {
        return $this->container['subject'];
    }

    /**
     * Sets subject
     * @param string $subject
     * @return $this
     */
    public function setSubject($subject)
    {
        $this->container['subject'] = $subject;

        return $this;
    }

    /**
     * Gets date_required_by
     * @return \DateTime
     */
    public function getDateRequiredBy()
    {
        return $this->container['date_required_by'];
    }

    /**
     * Sets date_required_by
     * @param \DateTime $date_required_by
     * @return $this
     */
    public function setDateRequiredBy($date_required_by)
    {
        $this->container['date_required_by'] = $date_required_by;

        return $this;
    }

    /**
     * Gets severity
     * @return string
     */
    public function getSeverity()
    {
        return $this->container['severity'];
    }

    /**
     * Sets severity
     * @param string $severity
     * @return $this
     */
    public function setSeverity($severity)
    {
        $this->container['severity'] = $severity;

        return $this;
    }

    /**
     * Gets date_created
     * @return \DateTime
     */
    public function getDateCreated()
    {
        return $this->container['date_created'];
    }

    /**
     * Sets date_created
     * @param \DateTime $date_created
     * @return $this
     */
    public function setDateCreated($date_created)
    {
        $this->container['date_created'] = $date_created;

        return $this;
    }

    /**
     * Gets source
     * @return string
     */
    public function getSource()
    {
        return $this->container['source'];
    }

    /**
     * Sets source
     * @param string $source
     * @return $this
     */
    public function setSource($source)
    {
        $this->container['source'] = $source;

        return $this;
    }

    /**
     * Gets ticket_uuid
     * @return string
     */
    public function getTicketUuid()
    {
        return $this->container['ticket_uuid'];
    }

    /**
     * Sets ticket_uuid
     * @param string $ticket_uuid
     * @return $this
     */
    public function setTicketUuid($ticket_uuid)
    {
        $this->container['ticket_uuid'] = $ticket_uuid;

        return $this;
    }

    /**
     * Gets status
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     * @param string $status
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets is_internal
     * @return string
     */
    public function getIsInternal()
    {
        return $this->container['is_internal'];
    }

    /**
     * Sets is_internal
     * @param string $is_internal
     * @return $this
     */
    public function setIsInternal($is_internal)
    {
        $this->container['is_internal'] = $is_internal;

        return $this;
    }

    /**
     * Gets requestor_group_user_id
     * @return int
     */
    public function getRequestorGroupUserId()
    {
        return $this->container['requestor_group_user_id'];
    }

    /**
     * Sets requestor_group_user_id
     * @param int $requestor_group_user_id
     * @return $this
     */
    public function setRequestorGroupUserId($requestor_group_user_id)
    {
        $this->container['requestor_group_user_id'] = $requestor_group_user_id;

        return $this;
    }

    /**
     * Gets assignee_group_user_id
     * @return int
     */
    public function getAssigneeGroupUserId()
    {
        return $this->container['assignee_group_user_id'];
    }

    /**
     * Sets assignee_group_user_id
     * @param int $assignee_group_user_id
     * @return $this
     */
    public function setAssigneeGroupUserId($assignee_group_user_id)
    {
        $this->container['assignee_group_user_id'] = $assignee_group_user_id;

        return $this;
    }

    /**
     * Gets owner_group_user_id
     * @return int
     */
    public function getOwnerGroupUserId()
    {
        return $this->container['owner_group_user_id'];
    }

    /**
     * Sets owner_group_user_id
     * @param int $owner_group_user_id
     * @return $this
     */
    public function setOwnerGroupUserId($owner_group_user_id)
    {
        $this->container['owner_group_user_id'] = $owner_group_user_id;

        return $this;
    }

    /**
     * Gets requestor_name
     * @return string
     */
    public function getRequestorName()
    {
        return $this->container['requestor_name'];
    }

    /**
     * Sets requestor_name
     * @param string $requestor_name
     * @return $this
     */
    public function setRequestorName($requestor_name)
    {
        $this->container['requestor_name'] = $requestor_name;

        return $this;
    }

    /**
     * Gets owner_name
     * @return string
     */
    public function getOwnerName()
    {
        return $this->container['owner_name'];
    }

    /**
     * Sets owner_name
     * @param string $owner_name
     * @return $this
     */
    public function setOwnerName($owner_name)
    {
        $this->container['owner_name'] = $owner_name;

        return $this;
    }

    /**
     * Gets assignee_name
     * @return string
     */
    public function getAssigneeName()
    {
        return $this->container['assignee_name'];
    }

    /**
     * Sets assignee_name
     * @param string $assignee_name
     * @return $this
     */
    public function setAssigneeName($assignee_name)
    {
        $this->container['assignee_name'] = $assignee_name;

        return $this;
    }

    /**
     * Gets owner_account_name
     * @return string
     */
    public function getOwnerAccountName()
    {
        return $this->container['owner_account_name'];
    }

    /**
     * Sets owner_account_name
     * @param string $owner_account_name
     * @return $this
     */
    public function setOwnerAccountName($owner_account_name)
    {
        $this->container['owner_account_name'] = $owner_account_name;

        return $this;
    }

    /**
     * Gets ticket_messages
     * @return \Swagger\Client\Model\TicketMessage[]
     */
    public function getTicketMessages()
    {
        return $this->container['ticket_messages'];
    }

    /**
     * Sets ticket_messages
     * @param \Swagger\Client\Model\TicketMessage[] $ticket_messages
     * @return $this
     */
    public function setTicketMessages($ticket_messages)
    {
        $this->container['ticket_messages'] = $ticket_messages;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


