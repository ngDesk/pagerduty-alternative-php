<?php
/**
 * DefaultApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * ngDesk_Operations
 *
 * ngDesk_Operations
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\Configuration;
use \Swagger\Client\ObjectSerializer;

/**
 * DefaultApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DefaultApi
{
    /**
     * API Client
     *
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Swagger\Client\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     *
     * @return DefaultApi
     */
    public function setApiClient(\Swagger\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation deletePremadeResponse
     *
     * @param int $ticket_premade_response_id  (required)
     * @param string $authentication_token  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\TicketPremadeResponse
     */
    public function deletePremadeResponse($ticket_premade_response_id, $authentication_token)
    {
        list($response) = $this->deletePremadeResponseWithHttpInfo($ticket_premade_response_id, $authentication_token);
        return $response;
    }

    /**
     * Operation deletePremadeResponseWithHttpInfo
     *
     * @param int $ticket_premade_response_id  (required)
     * @param string $authentication_token  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\TicketPremadeResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deletePremadeResponseWithHttpInfo($ticket_premade_response_id, $authentication_token)
    {
        // verify the required parameter 'ticket_premade_response_id' is set
        if ($ticket_premade_response_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ticket_premade_response_id when calling deletePremadeResponse');
        }
        // verify the required parameter 'authentication_token' is set
        if ($authentication_token === null) {
            throw new \InvalidArgumentException('Missing the required parameter $authentication_token when calling deletePremadeResponse');
        }
        // parse inputs
        $resourcePath = "/tickets/premade_responses/{ticket_premade_response_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($authentication_token !== null) {
            $queryParams['authentication_token'] = $this->apiClient->getSerializer()->toQueryValue($authentication_token);
        }
        // path params
        if ($ticket_premade_response_id !== null) {
            $resourcePath = str_replace(
                "{" . "ticket_premade_response_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($ticket_premade_response_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\TicketPremadeResponse',
                '/tickets/premade_responses/{ticket_premade_response_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\TicketPremadeResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\TicketPremadeResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteTicketReminder
     *
     * @param string $ticket_id  (required)
     * @param string $ticket_reminder_id  (required)
     * @param string $authentication_token  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function deleteTicketReminder($ticket_id, $ticket_reminder_id, $authentication_token)
    {
        list($response) = $this->deleteTicketReminderWithHttpInfo($ticket_id, $ticket_reminder_id, $authentication_token);
        return $response;
    }

    /**
     * Operation deleteTicketReminderWithHttpInfo
     *
     * @param string $ticket_id  (required)
     * @param string $ticket_reminder_id  (required)
     * @param string $authentication_token  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteTicketReminderWithHttpInfo($ticket_id, $ticket_reminder_id, $authentication_token)
    {
        // verify the required parameter 'ticket_id' is set
        if ($ticket_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ticket_id when calling deleteTicketReminder');
        }
        // verify the required parameter 'ticket_reminder_id' is set
        if ($ticket_reminder_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ticket_reminder_id when calling deleteTicketReminder');
        }
        // verify the required parameter 'authentication_token' is set
        if ($authentication_token === null) {
            throw new \InvalidArgumentException('Missing the required parameter $authentication_token when calling deleteTicketReminder');
        }
        // parse inputs
        $resourcePath = "/tickets/{ticket_id}/reminders/{ticket_reminder_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($authentication_token !== null) {
            $queryParams['authentication_token'] = $this->apiClient->getSerializer()->toQueryValue($authentication_token);
        }
        // path params
        if ($ticket_id !== null) {
            $resourcePath = str_replace(
                "{" . "ticket_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($ticket_id),
                $resourcePath
            );
        }
        // path params
        if ($ticket_reminder_id !== null) {
            $resourcePath = str_replace(
                "{" . "ticket_reminder_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($ticket_reminder_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/tickets/{ticket_id}/reminders/{ticket_reminder_id}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation deleteTicketTag
     *
     * @param string $ticket_id  (required)
     * @param string $tag_id  (required)
     * @param string $authentication_token  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function deleteTicketTag($ticket_id, $tag_id, $authentication_token)
    {
        list($response) = $this->deleteTicketTagWithHttpInfo($ticket_id, $tag_id, $authentication_token);
        return $response;
    }

    /**
     * Operation deleteTicketTagWithHttpInfo
     *
     * @param string $ticket_id  (required)
     * @param string $tag_id  (required)
     * @param string $authentication_token  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteTicketTagWithHttpInfo($ticket_id, $tag_id, $authentication_token)
    {
        // verify the required parameter 'ticket_id' is set
        if ($ticket_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ticket_id when calling deleteTicketTag');
        }
        // verify the required parameter 'tag_id' is set
        if ($tag_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $tag_id when calling deleteTicketTag');
        }
        // verify the required parameter 'authentication_token' is set
        if ($authentication_token === null) {
            throw new \InvalidArgumentException('Missing the required parameter $authentication_token when calling deleteTicketTag');
        }
        // parse inputs
        $resourcePath = "/tickets/{ticket_id}/tags/{tag_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($authentication_token !== null) {
            $queryParams['authentication_token'] = $this->apiClient->getSerializer()->toQueryValue($authentication_token);
        }
        // path params
        if ($ticket_id !== null) {
            $resourcePath = str_replace(
                "{" . "ticket_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($ticket_id),
                $resourcePath
            );
        }
        // path params
        if ($tag_id !== null) {
            $resourcePath = str_replace(
                "{" . "tag_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($tag_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/tickets/{ticket_id}/tags/{tag_id}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation getPremadeResponse
     *
     * @param string $ticket_premade_response_id  (required)
     * @param string $authentication_token  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\TicketPremadeResponse
     */
    public function getPremadeResponse($ticket_premade_response_id, $authentication_token)
    {
        list($response) = $this->getPremadeResponseWithHttpInfo($ticket_premade_response_id, $authentication_token);
        return $response;
    }

    /**
     * Operation getPremadeResponseWithHttpInfo
     *
     * @param string $ticket_premade_response_id  (required)
     * @param string $authentication_token  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\TicketPremadeResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPremadeResponseWithHttpInfo($ticket_premade_response_id, $authentication_token)
    {
        // verify the required parameter 'ticket_premade_response_id' is set
        if ($ticket_premade_response_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ticket_premade_response_id when calling getPremadeResponse');
        }
        // verify the required parameter 'authentication_token' is set
        if ($authentication_token === null) {
            throw new \InvalidArgumentException('Missing the required parameter $authentication_token when calling getPremadeResponse');
        }
        // parse inputs
        $resourcePath = "/tickets/premade_responses/{ticket_premade_response_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($authentication_token !== null) {
            $queryParams['authentication_token'] = $this->apiClient->getSerializer()->toQueryValue($authentication_token);
        }
        // path params
        if ($ticket_premade_response_id !== null) {
            $resourcePath = str_replace(
                "{" . "ticket_premade_response_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($ticket_premade_response_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\TicketPremadeResponse',
                '/tickets/premade_responses/{ticket_premade_response_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\TicketPremadeResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\TicketPremadeResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getPremadeResponses
     *
     * @param float $authentication_token User authentication uuid (required)
     * @param int $draw Number of times table has been reloaded (optional)
     * @param string $category Filter by category (optional)
     * @param string $sort_by Column name to order table by (optional)
     * @param int $start Start query value (optional)
     * @param string $sort_by_order Sort by ascending or descending (optional)
     * @param string $q  (optional)
     * @param int $length Number of rows query (optional)
     * @param string $statuses Filter by statuses (optional)
     * @param int $fields Column headers in order (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\TicketPremadeResponse
     */
    public function getPremadeResponses($authentication_token, $draw = null, $category = null, $sort_by = null, $start = null, $sort_by_order = null, $q = null, $length = null, $statuses = null, $fields = null)
    {
        list($response) = $this->getPremadeResponsesWithHttpInfo($authentication_token, $draw, $category, $sort_by, $start, $sort_by_order, $q, $length, $statuses, $fields);
        return $response;
    }

    /**
     * Operation getPremadeResponsesWithHttpInfo
     *
     * @param float $authentication_token User authentication uuid (required)
     * @param int $draw Number of times table has been reloaded (optional)
     * @param string $category Filter by category (optional)
     * @param string $sort_by Column name to order table by (optional)
     * @param int $start Start query value (optional)
     * @param string $sort_by_order Sort by ascending or descending (optional)
     * @param string $q  (optional)
     * @param int $length Number of rows query (optional)
     * @param string $statuses Filter by statuses (optional)
     * @param int $fields Column headers in order (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\TicketPremadeResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPremadeResponsesWithHttpInfo($authentication_token, $draw = null, $category = null, $sort_by = null, $start = null, $sort_by_order = null, $q = null, $length = null, $statuses = null, $fields = null)
    {
        // verify the required parameter 'authentication_token' is set
        if ($authentication_token === null) {
            throw new \InvalidArgumentException('Missing the required parameter $authentication_token when calling getPremadeResponses');
        }
        // parse inputs
        $resourcePath = "/tickets/premade_responses";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($draw !== null) {
            $queryParams['draw'] = $this->apiClient->getSerializer()->toQueryValue($draw);
        }
        // query params
        if ($category !== null) {
            $queryParams['category'] = $this->apiClient->getSerializer()->toQueryValue($category);
        }
        // query params
        if ($authentication_token !== null) {
            $queryParams['authentication_token'] = $this->apiClient->getSerializer()->toQueryValue($authentication_token);
        }
        // query params
        if ($sort_by !== null) {
            $queryParams['sort_by'] = $this->apiClient->getSerializer()->toQueryValue($sort_by);
        }
        // query params
        if ($start !== null) {
            $queryParams['start'] = $this->apiClient->getSerializer()->toQueryValue($start);
        }
        // query params
        if ($sort_by_order !== null) {
            $queryParams['sort_by_order'] = $this->apiClient->getSerializer()->toQueryValue($sort_by_order);
        }
        // query params
        if ($q !== null) {
            $queryParams['q'] = $this->apiClient->getSerializer()->toQueryValue($q);
        }
        // query params
        if ($length !== null) {
            $queryParams['length'] = $this->apiClient->getSerializer()->toQueryValue($length);
        }
        // query params
        if ($statuses !== null) {
            $queryParams['statuses'] = $this->apiClient->getSerializer()->toQueryValue($statuses);
        }
        // query params
        if ($fields !== null) {
            $queryParams['fields'] = $this->apiClient->getSerializer()->toQueryValue($fields);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\TicketPremadeResponse',
                '/tickets/premade_responses'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\TicketPremadeResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\TicketPremadeResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getTicket
     *
     * @param string $ticket_id  (required)
     * @param string $authentication_token  (required)
     * @param string $category  (optional)
     * @param string $statuses  (optional)
     * @param string $ordered_column  (optional)
     * @param string $ordered_by  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\Ticket
     */
    public function getTicket($ticket_id, $authentication_token, $category = null, $statuses = null, $ordered_column = null, $ordered_by = null)
    {
        list($response) = $this->getTicketWithHttpInfo($ticket_id, $authentication_token, $category, $statuses, $ordered_column, $ordered_by);
        return $response;
    }

    /**
     * Operation getTicketWithHttpInfo
     *
     * @param string $ticket_id  (required)
     * @param string $authentication_token  (required)
     * @param string $category  (optional)
     * @param string $statuses  (optional)
     * @param string $ordered_column  (optional)
     * @param string $ordered_by  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\Ticket, HTTP status code, HTTP response headers (array of strings)
     */
    public function getTicketWithHttpInfo($ticket_id, $authentication_token, $category = null, $statuses = null, $ordered_column = null, $ordered_by = null)
    {
        // verify the required parameter 'ticket_id' is set
        if ($ticket_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ticket_id when calling getTicket');
        }
        // verify the required parameter 'authentication_token' is set
        if ($authentication_token === null) {
            throw new \InvalidArgumentException('Missing the required parameter $authentication_token when calling getTicket');
        }
        // parse inputs
        $resourcePath = "/tickets/{ticket_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($authentication_token !== null) {
            $queryParams['authentication_token'] = $this->apiClient->getSerializer()->toQueryValue($authentication_token);
        }
        // query params
        if ($category !== null) {
            $queryParams['category'] = $this->apiClient->getSerializer()->toQueryValue($category);
        }
        // query params
        if ($statuses !== null) {
            $queryParams['statuses'] = $this->apiClient->getSerializer()->toQueryValue($statuses);
        }
        // query params
        if ($ordered_column !== null) {
            $queryParams['ordered_column'] = $this->apiClient->getSerializer()->toQueryValue($ordered_column);
        }
        // query params
        if ($ordered_by !== null) {
            $queryParams['ordered_by'] = $this->apiClient->getSerializer()->toQueryValue($ordered_by);
        }
        // path params
        if ($ticket_id !== null) {
            $resourcePath = str_replace(
                "{" . "ticket_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($ticket_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Ticket',
                '/tickets/{ticket_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Ticket', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Ticket', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getTicketReminder
     *
     * @param string $ticket_id  (required)
     * @param string $ticket_reminder_id  (required)
     * @param string $authentication_token  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\Ticket
     */
    public function getTicketReminder($ticket_id, $ticket_reminder_id, $authentication_token)
    {
        list($response) = $this->getTicketReminderWithHttpInfo($ticket_id, $ticket_reminder_id, $authentication_token);
        return $response;
    }

    /**
     * Operation getTicketReminderWithHttpInfo
     *
     * @param string $ticket_id  (required)
     * @param string $ticket_reminder_id  (required)
     * @param string $authentication_token  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\Ticket, HTTP status code, HTTP response headers (array of strings)
     */
    public function getTicketReminderWithHttpInfo($ticket_id, $ticket_reminder_id, $authentication_token)
    {
        // verify the required parameter 'ticket_id' is set
        if ($ticket_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ticket_id when calling getTicketReminder');
        }
        // verify the required parameter 'ticket_reminder_id' is set
        if ($ticket_reminder_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ticket_reminder_id when calling getTicketReminder');
        }
        // verify the required parameter 'authentication_token' is set
        if ($authentication_token === null) {
            throw new \InvalidArgumentException('Missing the required parameter $authentication_token when calling getTicketReminder');
        }
        // parse inputs
        $resourcePath = "/tickets/{ticket_id}/reminders/{ticket_reminder_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($authentication_token !== null) {
            $queryParams['authentication_token'] = $this->apiClient->getSerializer()->toQueryValue($authentication_token);
        }
        // path params
        if ($ticket_id !== null) {
            $resourcePath = str_replace(
                "{" . "ticket_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($ticket_id),
                $resourcePath
            );
        }
        // path params
        if ($ticket_reminder_id !== null) {
            $resourcePath = str_replace(
                "{" . "ticket_reminder_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($ticket_reminder_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Ticket',
                '/tickets/{ticket_id}/reminders/{ticket_reminder_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Ticket', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Ticket', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getTicketReminders
     *
     * @param string $ticket_id  (required)
     * @param string $authentication_token  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\Ticket
     */
    public function getTicketReminders($ticket_id, $authentication_token)
    {
        list($response) = $this->getTicketRemindersWithHttpInfo($ticket_id, $authentication_token);
        return $response;
    }

    /**
     * Operation getTicketRemindersWithHttpInfo
     *
     * @param string $ticket_id  (required)
     * @param string $authentication_token  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\Ticket, HTTP status code, HTTP response headers (array of strings)
     */
    public function getTicketRemindersWithHttpInfo($ticket_id, $authentication_token)
    {
        // verify the required parameter 'ticket_id' is set
        if ($ticket_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ticket_id when calling getTicketReminders');
        }
        // verify the required parameter 'authentication_token' is set
        if ($authentication_token === null) {
            throw new \InvalidArgumentException('Missing the required parameter $authentication_token when calling getTicketReminders');
        }
        // parse inputs
        $resourcePath = "/tickets/{ticket_id}/reminders";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($authentication_token !== null) {
            $queryParams['authentication_token'] = $this->apiClient->getSerializer()->toQueryValue($authentication_token);
        }
        // path params
        if ($ticket_id !== null) {
            $resourcePath = str_replace(
                "{" . "ticket_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($ticket_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Ticket',
                '/tickets/{ticket_id}/reminders'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Ticket', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Ticket', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getTicketTags
     *
     * @param string $ticket_id  (required)
     * @param string $authentication_token  (required)
     * @param int $start Start query value (optional)
     * @param int $length Number of rows query (optional)
     * @param int $draw Number of times table has been reloaded (optional)
     * @param string $q Values provided in q are tokenized and search on columns: TICKET_ID,SUBJECT,REQUESTOR_UERNAME, REQUESTOR_EMAIL, TICKET_MESSAGES (optional)
     * @param string $sort_by Column name to order table by (optional)
     * @param string $sort_by_order Sort by ascending or descending (optional)
     * @param string $fields Column headers in order (optional)
     * @param int $tag_id  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\Ticket
     */
    public function getTicketTags($ticket_id, $authentication_token, $start = null, $length = null, $draw = null, $q = null, $sort_by = null, $sort_by_order = null, $fields = null, $tag_id = null)
    {
        list($response) = $this->getTicketTagsWithHttpInfo($ticket_id, $authentication_token, $start, $length, $draw, $q, $sort_by, $sort_by_order, $fields, $tag_id);
        return $response;
    }

    /**
     * Operation getTicketTagsWithHttpInfo
     *
     * @param string $ticket_id  (required)
     * @param string $authentication_token  (required)
     * @param int $start Start query value (optional)
     * @param int $length Number of rows query (optional)
     * @param int $draw Number of times table has been reloaded (optional)
     * @param string $q Values provided in q are tokenized and search on columns: TICKET_ID,SUBJECT,REQUESTOR_UERNAME, REQUESTOR_EMAIL, TICKET_MESSAGES (optional)
     * @param string $sort_by Column name to order table by (optional)
     * @param string $sort_by_order Sort by ascending or descending (optional)
     * @param string $fields Column headers in order (optional)
     * @param int $tag_id  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\Ticket, HTTP status code, HTTP response headers (array of strings)
     */
    public function getTicketTagsWithHttpInfo($ticket_id, $authentication_token, $start = null, $length = null, $draw = null, $q = null, $sort_by = null, $sort_by_order = null, $fields = null, $tag_id = null)
    {
        // verify the required parameter 'ticket_id' is set
        if ($ticket_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ticket_id when calling getTicketTags');
        }
        // verify the required parameter 'authentication_token' is set
        if ($authentication_token === null) {
            throw new \InvalidArgumentException('Missing the required parameter $authentication_token when calling getTicketTags');
        }
        // parse inputs
        $resourcePath = "/tickets/{ticket_id}/tags";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($authentication_token !== null) {
            $queryParams['authentication_token'] = $this->apiClient->getSerializer()->toQueryValue($authentication_token);
        }
        // query params
        if ($start !== null) {
            $queryParams['start'] = $this->apiClient->getSerializer()->toQueryValue($start);
        }
        // query params
        if ($length !== null) {
            $queryParams['length'] = $this->apiClient->getSerializer()->toQueryValue($length);
        }
        // query params
        if ($draw !== null) {
            $queryParams['draw'] = $this->apiClient->getSerializer()->toQueryValue($draw);
        }
        // query params
        if ($q !== null) {
            $queryParams['q'] = $this->apiClient->getSerializer()->toQueryValue($q);
        }
        // query params
        if ($sort_by !== null) {
            $queryParams['sort_by'] = $this->apiClient->getSerializer()->toQueryValue($sort_by);
        }
        // query params
        if ($sort_by_order !== null) {
            $queryParams['sort_by_order'] = $this->apiClient->getSerializer()->toQueryValue($sort_by_order);
        }
        // query params
        if ($fields !== null) {
            $queryParams['fields'] = $this->apiClient->getSerializer()->toQueryValue($fields);
        }
        // query params
        if ($tag_id !== null) {
            $queryParams['tag_id'] = $this->apiClient->getSerializer()->toQueryValue($tag_id);
        }
        // path params
        if ($ticket_id !== null) {
            $resourcePath = str_replace(
                "{" . "ticket_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($ticket_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Ticket',
                '/tickets/{ticket_id}/tags'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Ticket', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Ticket', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getTickets
     *
     * @param float $authentication_token User athentication uuid (required)
     * @param int $start Start query value (optional)
     * @param int $length Number of rows query (optional)
     * @param int $draw Number of times table has been reloaded (optional)
     * @param string $q Values provided in q are tokenized and search on columns: TICKET_ID,SUBJECT,REQUESTOR_UERNAME, REQUESTOR_EMAIL, TICKET_MESSAGES (optional)
     * @param string $sort_by Column name to order table by (optional)
     * @param string $sort_by_order Sort by ascending or descending (optional)
     * @param string $fields Column headers in order (optional)
     * @param string $statuses Filter by statuses (optional)
     * @param string $category Filter by category (optional)
     * @param string $account_id  (optional)
     * @param int $tag_id  (optional)
     * @param string $user_id  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\Ticket[]
     */
    public function getTickets($authentication_token, $start = null, $length = null, $draw = null, $q = null, $sort_by = null, $sort_by_order = null, $fields = null, $statuses = null, $category = null, $account_id = null, $tag_id = null, $user_id = null)
    {
        list($response) = $this->getTicketsWithHttpInfo($authentication_token, $start, $length, $draw, $q, $sort_by, $sort_by_order, $fields, $statuses, $category, $account_id, $tag_id, $user_id);
        return $response;
    }

    /**
     * Operation getTicketsWithHttpInfo
     *
     * @param float $authentication_token User athentication uuid (required)
     * @param int $start Start query value (optional)
     * @param int $length Number of rows query (optional)
     * @param int $draw Number of times table has been reloaded (optional)
     * @param string $q Values provided in q are tokenized and search on columns: TICKET_ID,SUBJECT,REQUESTOR_UERNAME, REQUESTOR_EMAIL, TICKET_MESSAGES (optional)
     * @param string $sort_by Column name to order table by (optional)
     * @param string $sort_by_order Sort by ascending or descending (optional)
     * @param string $fields Column headers in order (optional)
     * @param string $statuses Filter by statuses (optional)
     * @param string $category Filter by category (optional)
     * @param string $account_id  (optional)
     * @param int $tag_id  (optional)
     * @param string $user_id  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\Ticket[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getTicketsWithHttpInfo($authentication_token, $start = null, $length = null, $draw = null, $q = null, $sort_by = null, $sort_by_order = null, $fields = null, $statuses = null, $category = null, $account_id = null, $tag_id = null, $user_id = null)
    {
        // verify the required parameter 'authentication_token' is set
        if ($authentication_token === null) {
            throw new \InvalidArgumentException('Missing the required parameter $authentication_token when calling getTickets');
        }
        // parse inputs
        $resourcePath = "/tickets";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($authentication_token !== null) {
            $queryParams['authentication_token'] = $this->apiClient->getSerializer()->toQueryValue($authentication_token);
        }
        // query params
        if ($start !== null) {
            $queryParams['start'] = $this->apiClient->getSerializer()->toQueryValue($start);
        }
        // query params
        if ($length !== null) {
            $queryParams['length'] = $this->apiClient->getSerializer()->toQueryValue($length);
        }
        // query params
        if ($draw !== null) {
            $queryParams['draw'] = $this->apiClient->getSerializer()->toQueryValue($draw);
        }
        // query params
        if ($q !== null) {
            $queryParams['q'] = $this->apiClient->getSerializer()->toQueryValue($q);
        }
        // query params
        if ($sort_by !== null) {
            $queryParams['sort_by'] = $this->apiClient->getSerializer()->toQueryValue($sort_by);
        }
        // query params
        if ($sort_by_order !== null) {
            $queryParams['sort_by_order'] = $this->apiClient->getSerializer()->toQueryValue($sort_by_order);
        }
        // query params
        if ($fields !== null) {
            $queryParams['fields'] = $this->apiClient->getSerializer()->toQueryValue($fields);
        }
        // query params
        if ($statuses !== null) {
            $queryParams['statuses'] = $this->apiClient->getSerializer()->toQueryValue($statuses);
        }
        // query params
        if ($category !== null) {
            $queryParams['category'] = $this->apiClient->getSerializer()->toQueryValue($category);
        }
        // query params
        if ($account_id !== null) {
            $queryParams['account_id'] = $this->apiClient->getSerializer()->toQueryValue($account_id);
        }
        // query params
        if ($tag_id !== null) {
            $queryParams['tag_id'] = $this->apiClient->getSerializer()->toQueryValue($tag_id);
        }
        // query params
        if ($user_id !== null) {
            $queryParams['user_id'] = $this->apiClient->getSerializer()->toQueryValue($user_id);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Ticket[]',
                '/tickets'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Ticket[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Ticket[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation postTicketMessages
     *
     * @param \Swagger\Client\Model\TicketMessage[] $body The request body for the operation (required)
     * @param string $authentication_token  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\TicketMessage
     */
    public function postTicketMessages($body, $authentication_token)
    {
        list($response) = $this->postTicketMessagesWithHttpInfo($body, $authentication_token);
        return $response;
    }

    /**
     * Operation postTicketMessagesWithHttpInfo
     *
     * @param \Swagger\Client\Model\TicketMessage[] $body The request body for the operation (required)
     * @param string $authentication_token  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\TicketMessage, HTTP status code, HTTP response headers (array of strings)
     */
    public function postTicketMessagesWithHttpInfo($body, $authentication_token)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling postTicketMessages');
        }
        // verify the required parameter 'authentication_token' is set
        if ($authentication_token === null) {
            throw new \InvalidArgumentException('Missing the required parameter $authentication_token when calling postTicketMessages');
        }
        // parse inputs
        $resourcePath = "/ticket_messages";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($authentication_token !== null) {
            $queryParams['authentication_token'] = $this->apiClient->getSerializer()->toQueryValue($authentication_token);
        }
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\TicketMessage',
                '/ticket_messages'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\TicketMessage', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\TicketMessage', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation postTicketReminders
     *
     * @param string $ticket_id  (required)
     * @param \Swagger\Client\Model\Ticket $body The request body for the operation (required)
     * @param string $authentication_token  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function postTicketReminders($ticket_id, $body, $authentication_token)
    {
        list($response) = $this->postTicketRemindersWithHttpInfo($ticket_id, $body, $authentication_token);
        return $response;
    }

    /**
     * Operation postTicketRemindersWithHttpInfo
     *
     * @param string $ticket_id  (required)
     * @param \Swagger\Client\Model\Ticket $body The request body for the operation (required)
     * @param string $authentication_token  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function postTicketRemindersWithHttpInfo($ticket_id, $body, $authentication_token)
    {
        // verify the required parameter 'ticket_id' is set
        if ($ticket_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ticket_id when calling postTicketReminders');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling postTicketReminders');
        }
        // verify the required parameter 'authentication_token' is set
        if ($authentication_token === null) {
            throw new \InvalidArgumentException('Missing the required parameter $authentication_token when calling postTicketReminders');
        }
        // parse inputs
        $resourcePath = "/tickets/{ticket_id}/reminders";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($authentication_token !== null) {
            $queryParams['authentication_token'] = $this->apiClient->getSerializer()->toQueryValue($authentication_token);
        }
        // path params
        if ($ticket_id !== null) {
            $resourcePath = str_replace(
                "{" . "ticket_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($ticket_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/tickets/{ticket_id}/reminders'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation postTickets
     *
     * @param \Swagger\Client\Model\TicketMessage[] $body The request body for the operation (required)
     * @param float $authentication_token User athentication uuid (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\Ticket
     */
    public function postTickets($body, $authentication_token = null)
    {
        list($response) = $this->postTicketsWithHttpInfo($body, $authentication_token);
        return $response;
    }

    /**
     * Operation postTicketsWithHttpInfo
     *
     * @param \Swagger\Client\Model\TicketMessage[] $body The request body for the operation (required)
     * @param float $authentication_token User athentication uuid (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\Ticket, HTTP status code, HTTP response headers (array of strings)
     */
    public function postTicketsWithHttpInfo($body, $authentication_token = null)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling postTickets');
        }
        // parse inputs
        $resourcePath = "/tickets";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($authentication_token !== null) {
            $queryParams['authentication_token'] = $this->apiClient->getSerializer()->toQueryValue($authentication_token);
        }
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Ticket',
                '/tickets'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Ticket', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Ticket', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation putPremadeResponses
     *
     * @param \Swagger\Client\Model\TicketPremadeResponse $body The request body for the operation (required)
     * @param string $authentication_token  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\TicketPremadeResponse
     */
    public function putPremadeResponses($body, $authentication_token)
    {
        list($response) = $this->putPremadeResponsesWithHttpInfo($body, $authentication_token);
        return $response;
    }

    /**
     * Operation putPremadeResponsesWithHttpInfo
     *
     * @param \Swagger\Client\Model\TicketPremadeResponse $body The request body for the operation (required)
     * @param string $authentication_token  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\TicketPremadeResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function putPremadeResponsesWithHttpInfo($body, $authentication_token)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling putPremadeResponses');
        }
        // verify the required parameter 'authentication_token' is set
        if ($authentication_token === null) {
            throw new \InvalidArgumentException('Missing the required parameter $authentication_token when calling putPremadeResponses');
        }
        // parse inputs
        $resourcePath = "/tickets/premade_responses";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($authentication_token !== null) {
            $queryParams['authentication_token'] = $this->apiClient->getSerializer()->toQueryValue($authentication_token);
        }
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\TicketPremadeResponse',
                '/tickets/premade_responses'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\TicketPremadeResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\TicketPremadeResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation putTicketMessages
     *
     * @param \Swagger\Client\Model\TicketMessage $body The request body for the operation (required)
     * @param string $authentication_token  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\TicketMessage
     */
    public function putTicketMessages($body, $authentication_token)
    {
        list($response) = $this->putTicketMessagesWithHttpInfo($body, $authentication_token);
        return $response;
    }

    /**
     * Operation putTicketMessagesWithHttpInfo
     *
     * @param \Swagger\Client\Model\TicketMessage $body The request body for the operation (required)
     * @param string $authentication_token  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\TicketMessage, HTTP status code, HTTP response headers (array of strings)
     */
    public function putTicketMessagesWithHttpInfo($body, $authentication_token)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling putTicketMessages');
        }
        // verify the required parameter 'authentication_token' is set
        if ($authentication_token === null) {
            throw new \InvalidArgumentException('Missing the required parameter $authentication_token when calling putTicketMessages');
        }
        // parse inputs
        $resourcePath = "/ticket_messages";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($authentication_token !== null) {
            $queryParams['authentication_token'] = $this->apiClient->getSerializer()->toQueryValue($authentication_token);
        }
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\TicketMessage',
                '/ticket_messages'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\TicketMessage', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\TicketMessage', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation putTicketReminders
     *
     * @param string $ticket_id  (required)
     * @param \Swagger\Client\Model\Ticket $body The request body for the operation (required)
     * @param string $authentication_token  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function putTicketReminders($ticket_id, $body, $authentication_token)
    {
        list($response) = $this->putTicketRemindersWithHttpInfo($ticket_id, $body, $authentication_token);
        return $response;
    }

    /**
     * Operation putTicketRemindersWithHttpInfo
     *
     * @param string $ticket_id  (required)
     * @param \Swagger\Client\Model\Ticket $body The request body for the operation (required)
     * @param string $authentication_token  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function putTicketRemindersWithHttpInfo($ticket_id, $body, $authentication_token)
    {
        // verify the required parameter 'ticket_id' is set
        if ($ticket_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ticket_id when calling putTicketReminders');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling putTicketReminders');
        }
        // verify the required parameter 'authentication_token' is set
        if ($authentication_token === null) {
            throw new \InvalidArgumentException('Missing the required parameter $authentication_token when calling putTicketReminders');
        }
        // parse inputs
        $resourcePath = "/tickets/{ticket_id}/reminders";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($authentication_token !== null) {
            $queryParams['authentication_token'] = $this->apiClient->getSerializer()->toQueryValue($authentication_token);
        }
        // path params
        if ($ticket_id !== null) {
            $resourcePath = str_replace(
                "{" . "ticket_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($ticket_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/tickets/{ticket_id}/reminders'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation putTicketReview
     *
     * @param \Swagger\Client\Model\Ticket $body The request body for the operation (required)
     * @param string $ticket_uuid  (required)
     * @param string $rating  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function putTicketReview($body, $ticket_uuid, $rating)
    {
        list($response) = $this->putTicketReviewWithHttpInfo($body, $ticket_uuid, $rating);
        return $response;
    }

    /**
     * Operation putTicketReviewWithHttpInfo
     *
     * @param \Swagger\Client\Model\Ticket $body The request body for the operation (required)
     * @param string $ticket_uuid  (required)
     * @param string $rating  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function putTicketReviewWithHttpInfo($body, $ticket_uuid, $rating)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling putTicketReview');
        }
        // verify the required parameter 'ticket_uuid' is set
        if ($ticket_uuid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ticket_uuid when calling putTicketReview');
        }
        // verify the required parameter 'rating' is set
        if ($rating === null) {
            throw new \InvalidArgumentException('Missing the required parameter $rating when calling putTicketReview');
        }
        // parse inputs
        $resourcePath = "/ticket_review";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($ticket_uuid !== null) {
            $queryParams['ticket_uuid'] = $this->apiClient->getSerializer()->toQueryValue($ticket_uuid);
        }
        // query params
        if ($rating !== null) {
            $queryParams['rating'] = $this->apiClient->getSerializer()->toQueryValue($rating);
        }
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/ticket_review'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation putTicketTags
     *
     * @param string $ticket_id  (required)
     * @param \Swagger\Client\Model\Ticket $body The request body for the operation (required)
     * @param string $authentication_token  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function putTicketTags($ticket_id, $body, $authentication_token)
    {
        list($response) = $this->putTicketTagsWithHttpInfo($ticket_id, $body, $authentication_token);
        return $response;
    }

    /**
     * Operation putTicketTagsWithHttpInfo
     *
     * @param string $ticket_id  (required)
     * @param \Swagger\Client\Model\Ticket $body The request body for the operation (required)
     * @param string $authentication_token  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function putTicketTagsWithHttpInfo($ticket_id, $body, $authentication_token)
    {
        // verify the required parameter 'ticket_id' is set
        if ($ticket_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ticket_id when calling putTicketTags');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling putTicketTags');
        }
        // verify the required parameter 'authentication_token' is set
        if ($authentication_token === null) {
            throw new \InvalidArgumentException('Missing the required parameter $authentication_token when calling putTicketTags');
        }
        // parse inputs
        $resourcePath = "/tickets/{ticket_id}/tags";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($authentication_token !== null) {
            $queryParams['authentication_token'] = $this->apiClient->getSerializer()->toQueryValue($authentication_token);
        }
        // path params
        if ($ticket_id !== null) {
            $resourcePath = str_replace(
                "{" . "ticket_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($ticket_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/tickets/{ticket_id}/tags'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation putTickets
     *
     * @param \Swagger\Client\Model\Ticket[] $body The request body for the operation (required)
     * @param bool $authentication_token User athentication uuid (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\Ticket[]
     */
    public function putTickets($body, $authentication_token = null)
    {
        list($response) = $this->putTicketsWithHttpInfo($body, $authentication_token);
        return $response;
    }

    /**
     * Operation putTicketsWithHttpInfo
     *
     * @param \Swagger\Client\Model\Ticket[] $body The request body for the operation (required)
     * @param bool $authentication_token User athentication uuid (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\Ticket[], HTTP status code, HTTP response headers (array of strings)
     */
    public function putTicketsWithHttpInfo($body, $authentication_token = null)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling putTickets');
        }
        // parse inputs
        $resourcePath = "/tickets";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($authentication_token !== null) {
            $queryParams['authentication_token'] = $this->apiClient->getSerializer()->toQueryValue($authentication_token);
        }
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Ticket[]',
                '/tickets'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Ticket[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Ticket[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
